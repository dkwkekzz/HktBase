// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hkt.proto

#include "hkt.pb.h"
#include "hkt.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace hkt {

static const char* HktRpcService_method_names[] = {
  "/hkt.HktRpcService/SyncGroup",
  "/hkt.HktRpcService/ExecuteBehavior",
};

std::unique_ptr< HktRpcService::Stub> HktRpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HktRpcService::Stub> stub(new HktRpcService::Stub(channel, options));
  return stub;
}

HktRpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SyncGroup_(HktRpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteBehavior_(HktRpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::hkt::SyncResponse>* HktRpcService::Stub::SyncGroupRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), rpcmethod_SyncGroup_, context, request);
}

void HktRpcService::Stub::async::SyncGroup(::grpc::ClientContext* context, const ::hkt::SyncRequest* request, ::grpc::ClientReadReactor< ::hkt::SyncResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::hkt::SyncResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncGroup_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::hkt::SyncResponse>* HktRpcService::Stub::AsyncSyncGroupRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), cq, rpcmethod_SyncGroup_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::hkt::SyncResponse>* HktRpcService::Stub::PrepareAsyncSyncGroupRaw(::grpc::ClientContext* context, const ::hkt::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::hkt::SyncResponse>::Create(channel_.get(), cq, rpcmethod_SyncGroup_, context, request, false, nullptr);
}

::grpc::Status HktRpcService::Stub::ExecuteBehavior(::grpc::ClientContext* context, const ::hkt::BehaviorRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hkt::BehaviorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteBehavior_, context, request, response);
}

void HktRpcService::Stub::async::ExecuteBehavior(::grpc::ClientContext* context, const ::hkt::BehaviorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hkt::BehaviorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteBehavior_, context, request, response, std::move(f));
}

void HktRpcService::Stub::async::ExecuteBehavior(::grpc::ClientContext* context, const ::hkt::BehaviorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteBehavior_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HktRpcService::Stub::PrepareAsyncExecuteBehaviorRaw(::grpc::ClientContext* context, const ::hkt::BehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::hkt::BehaviorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteBehavior_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* HktRpcService::Stub::AsyncExecuteBehaviorRaw(::grpc::ClientContext* context, const ::hkt::BehaviorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteBehaviorRaw(context, request, cq);
  result->StartCall();
  return result;
}

HktRpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktRpcService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< HktRpcService::Service, ::hkt::SyncRequest, ::hkt::SyncResponse>(
          [](HktRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::SyncRequest* req,
             ::grpc::ServerWriter<::hkt::SyncResponse>* writer) {
               return service->SyncGroup(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HktRpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HktRpcService::Service, ::hkt::BehaviorRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HktRpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hkt::BehaviorRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ExecuteBehavior(ctx, req, resp);
             }, this)));
}

HktRpcService::Service::~Service() {
}

::grpc::Status HktRpcService::Service::SyncGroup(::grpc::ServerContext* context, const ::hkt::SyncRequest* request, ::grpc::ServerWriter< ::hkt::SyncResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HktRpcService::Service::ExecuteBehavior(::grpc::ServerContext* context, const ::hkt::BehaviorRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hkt
#include <grpcpp/ports_undef.inc>

